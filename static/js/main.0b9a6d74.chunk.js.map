{"version":3,"sources":["serviceWorker.js","components/stateless/KasusIndonesia.jsx","services/Get.js","services/config.js","services/api.js","utils/Formatter.js","components/stateless/statefull/ByProv.jsx","components/stateless/Footer.jsx","pages/Home.jsx","index.js"],"names":["Boolean","window","location","hostname","match","KasusIndonesia","props","className","pref","title","jumlah","Get","path","Promise","resolve","reject","axios","get","then","res","data","err","API","getCases","getCasesByProv","x","toString","replace","month","date","Date","console","log","getFullYear","getMonth","getDate","ByProv","state","dataByProv","filterProv","isExist","getByProv","setState","document","getElementById","value","this","provinsi","target","filter","cond","includes","toUpperCase","map","push","style","marginTop","paddingLeft","type","id","onChange","text","filterByProv","placeholder","onClick","resetText","width","key","Formatter","dirawat","meninggal","sembuh","Component","Footer","Home","jumlahKasus","perawatan","lastUpdated","totalKasus","lastUpdate","getSembuh","paddingTop","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b9a6d74.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst KasusIndonesia = (props) => {\r\n    return(\r\n        <div className={props.pref}>\r\n            <div className=\"card-body\">\r\n                <h5 className=\"card-tite\">{props.title}</h5>\r\n                <p className=\"card-text\">{props.jumlah}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default KasusIndonesia;","import axios from 'axios'\r\nimport { rootPath } from './config';\r\n\r\nconst Get = (path) => {\r\n    const promise = new Promise((resolve, reject) => {\r\n        axios.get(`${rootPath}/${path}`)\r\n            .then((res) => {\r\n                return resolve(res.data)\r\n            }, (err) => {\r\n                reject(err)\r\n            })\r\n    })\r\n    return promise;\r\n};\r\n\r\nexport default Get;","// export const rootPath = \"https://indonesia-covid-19.mathdro.id/api\"\r\nexport const rootPath = \"https://apicovid19indonesia-v2.vercel.app/api\";\r\n","import Get from './Get'\r\n\r\nconst getCases = () => Get('indonesia');\r\nconst getCasesByProv = () => Get('indonesia/provinsi');\r\n\r\nconst API = {\r\n    getCases,\r\n    getCasesByProv\r\n}\r\n\r\nexport default API;","const numberWithCommas = (x) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nconst date = (x) => {\r\n    const month = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n    // var date = x;\r\n    var date = new Date(x);\r\n    console.log(date.getFullYear(), month[date.getMonth()], date.getDate());\r\n    date = `${date.getDate()} ${month[date.getMonth()]} ${date.getFullYear()}`\r\n    return date;\r\n}\r\nexport default { numberWithCommas, date }","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React, { Component } from 'react';\r\nimport API from '../../../services/api';\r\n\r\nimport Formatter from '../../../utils/Formatter';\r\nclass ByProv extends Component {\r\n    state = {\r\n        dataByProv: [],\r\n        filterProv: [],\r\n        isExist: true\r\n    }\r\n\r\n    getByProv = () => {\r\n        API.getCasesByProv().then((res) => {\r\n            this.setState({\r\n                dataByProv: res,\r\n                filterProv: res\r\n            })\r\n        })\r\n    }\r\n\r\n    resetText() {\r\n        document.getElementById('provinsi-input').value = \"\";\r\n        this.setState({\r\n            dataByProv: this.state.filterProv\r\n        })\r\n    }\r\n\r\n    filterByProv(provinsi) {\r\n        if (provinsi.target.value === \"\") {\r\n            this.setState({\r\n                dataByProv: this.state.filterProv\r\n            })\r\n        } else {\r\n            let dataByProv = [...this.state.filterProv]\r\n            dataByProv = []\r\n            this.state.dataByProv.filter(cond => cond.provinsi.includes(provinsi.target.value.toUpperCase())).map((data) => {\r\n                dataByProv.push(data)\r\n                this.setState({\r\n                    dataByProv,\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getByProv()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ marginTop: \"30px\" }}>\r\n                <h3>Kasus Berdasarkan Provinsi</h3>\r\n                <div className=\"col-md-4\" style={{ paddingLeft: \"0px\" }}>\r\n                    <div className=\"input-group mb-3\">\r\n                        <input type=\"text\" id=\"provinsi-input\" className=\"form-control\" onChange={(text) => this.filterByProv(text)} placeholder=\"Provinsi\" />\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-warning\" type=\"button\" onClick={() => this.resetText()}>❌</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"table-wrapper-scroll-y my-custom-scrollbar table-responsive\">\r\n                    <table className=\"table table-striped table-dark table-brderless\">\r\n                        <thead style={{ width: \"100%\" }}>\r\n                            <tr>\r\n                                <th>Provinsi</th>\r\n                                <th>Positif</th>\r\n                                <th>Meninggal</th>\r\n                                <th>Sembuh</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.dataByProv.map(data => {\r\n                                    return (\r\n                                        <tr key={data.provinsi}>\r\n                                            <td>{data.provinsi}</td>\r\n                                            <td><span className=\"badge badge-primary\">{Formatter.numberWithCommas(data.dirawat)}</span></td>\r\n                                            <td><span className=\"badge badge-danger\">{Formatter.numberWithCommas(data.meninggal)}</span></td>\r\n                                            <td><span className=\"badge badge-success\">{Formatter.numberWithCommas(data.sembuh)}</span></td>\r\n                                        </tr>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <br />\r\n                <br />\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default ByProv;","/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <center>\r\n            <h4>Made with ❤️ By Developer</h4>\r\n            <h5>Get some ☕ with me: </h5>\r\n            <p>sinagafranz12@gmail.com</p>\r\n        </center>\r\n    )\r\n}\r\n\r\nexport default Footer;","/* eslint-disable no-unused-expressions */\r\nimport React, { Component } from 'react';\r\nimport KasusIndonesia from '../components/stateless/KasusIndonesia';\r\nimport API from '../services/api';\r\nimport ByProv from '../components/stateless/statefull/ByProv';\r\nimport Footer from '../components/stateless/Footer';\r\n\r\nimport Formatter from '../utils/Formatter';\r\nclass Home extends Component {\r\n    state = {\r\n        sembuh: 0,\r\n        meninggal: 0,\r\n        jumlahKasus: 0,\r\n        perawatan: 0,\r\n        lastUpdated: ''\r\n    }\r\n\r\n    getSembuh() {\r\n        API.getCases().then(res => {\r\n            const totalKasus = res.sembuh + res.meninggal + res.dirawat;\r\n            this.setState({\r\n                sembuh: Formatter.numberWithCommas(res.sembuh),\r\n                meninggal: Formatter.numberWithCommas(res.meninggal),\r\n                jumlahKasus: Formatter.numberWithCommas(totalKasus),\r\n                perawatan: Formatter.numberWithCommas(res.dirawat),\r\n                lastUpdated: Formatter.date(res.lastUpdate)\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getSembuh()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App-header\">\r\n                <div className=\"container\">\r\n                    <div style={{ paddingTop: \"50px\" }}>\r\n                        <h2>Coronavirus Indonesia Live Data</h2>\r\n                        {/* eslint-disable-next-line jsx-a11y/accessible-emoji */}\r\n                        <h4>😷 Stay safe</h4>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <br />\r\n                        <div className=\"col-md-3\">\r\n                            <KasusIndonesia\r\n                                pref=\"card text-white bg-primary mb-3\"\r\n                                title=\"Jumlah Kasus\"\r\n                                jumlah={this.state.jumlahKasus} />\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <KasusIndonesia\r\n                                pref=\"card text-white bg-success mb-3\"\r\n                                title=\"Sembuh\"\r\n                                jumlah={this.state.sembuh} />\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <KasusIndonesia\r\n                                pref=\"card text-white bg-danger mb-3\"\r\n                                title=\"Meninggal\"\r\n                                jumlah={this.state.meninggal} />\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <KasusIndonesia\r\n                                pref=\"card text-white bg-warning mb-3\"\r\n                                title=\"Dirawat\"\r\n                                jumlah={this.state.perawatan} />\r\n                        </div>\r\n                    </div>\r\n                    <h6>Last Updated: {this.state.lastUpdated}</h6>\r\n\r\n                    <ByProv />\r\n                    <Footer />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Home from './pages/Home';\r\nimport './App.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Home />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}